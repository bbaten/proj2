class SchoolRecord:
    def __init__(self):
        self.changes = []

    def log_change(self, message):
        self.changes.append(message)


class Person:
    def __init__(self, name):
        self.name = name


class Teacher(Person):
    def __init__(self, name):
        super().__init__(name)
        self.students_grades = {}

    def search_student(self, student_name, course_id):
        key = (course_id, student_name)
        if key in self.students_grades:
            return self.students_grades[key]
        else:
            return None

    def update_student_grade(self, student_name, course_id, grade):
        key = (course_id, student_name)
        if key in self.students_grades:
            self.students_grades[key] = grade
            message = f"{self.name} updated {student_name}'s grade for course {course_id} to {grade}"
            school_record.log_change(message)
        else:
            print(f"Error: Student {student_name} not found in course {course_id}")

    def filter_students_by_grade(self, grade, course_id):
        filtered_students = [student_name for (cid, student_name), student_grade in self.students_grades.items()
                             if cid == course_id and student_grade == grade]
        return filtered_students


class Student(Person):
    def __init__(self, name):
        super().__init__(name)
        self.grades = {}

    def view_grades(self):
        return self.grades

    def view_teacher_by_course(self, course_id):
        if course_id in self.grades:
            return self.grades[course_id]["teacher"]
        else:
            return None


class School:
    def __init__(self):
        self.teachers = []
        self.students = []

    def add_teacher(self, teacher):
        self.teachers.append(teacher)

    def add_student(self, student):
        self.students.append(student)

    def hire_teacher(self, teacher_name, course_id):
        global_data_structure[(course_id, teacher_name)] = None
        print(f"{teacher_name} is now teaching course {course_id}")

    def print_menu(self):
        print("\nOptions:")
        print("1. Grade student")
        print("2. View grades")
        print("3. Search for student")
        print("4. Filter students by grade and course ID")
        print("5. Hire teacher")
        print("6. Exit")


# Global data structure shared between teachers and students
global_data_structure = {}
school_record = SchoolRecord()
school = School()

# Instantiate teachers and students
teacher1 = Teacher("Mr. Smith")
teacher2 = Teacher("Mrs. Johnson")
teacher3 = Teacher("Dr. Brown")

student1 = Student("Alice")
student2 = Student("Bob")
student3 = Student("Charlie")

school.add_teacher(teacher1)
school.add_teacher(teacher2)
school.add_teacher(teacher3)

school.add_student(student1)
school.add_student(student2)
school.add_student(student3)

# Main program loop
while True:
    school.print_menu()
    choice = input("Enter your choice (1-6): ")

    if choice == "1":
        student_name = input("Enter student name: ")
        course_id = input("Enter course ID: ")
        grade = input("Enter grade: ")
        teacher_name = input("Enter teacher name: ")
        key = (course_id, student_name)
        global_data_structure[key] = {"teacher": teacher_name, "grade": grade}
        message = f"{teacher_name} graded {student_name} for course {course_id} with grade {grade}"
        school_record.log_change(message)

    elif choice == "2":
        student_name = input("Enter student name: ")
        student = next((s for s in school.students if s.name == student_name), None)
        if student:
            print(f"Grades for {student_name}: {student.view_grades()}")
        else:
            print(f"Error: Student {student_name} not found.")

    elif choice == "3":
        student_name = input("Enter student name: ")
        course_id = input("Enter course ID: ")
        teacher = next((t for t in school.teachers if t.name == global_data_structure[(course_id, student_name)]["teacher"]), None)
        if teacher:
            print(f"Teacher for {student_name}'s course {course_id}: {teacher.name}")
        else:
            print(f"Error: Teacher not found for {student_name}'s course {course_id}.")

    elif choice == "4":
        grade = input("Enter grade: ")
        course_id = input("Enter course ID: ")
        filtered_students = [student_name for (cid, student_name), student_grade in global_data_structure.items()
                             if cid == course_id and student_grade["grade"] == grade]
        print(f"Students with grade {grade} in course {course_id}: {filtered_students}")

    elif choice == "5":
        teacher_name = input("Enter teacher name: ")
        course_id = input("Enter course ID: ")
        school.hire_teacher(teacher_name, course_id)

    elif choice == "6":
        print("Exiting program.")
        break

    else:
        print("Invalid choice. Please enter a number between 1 and 6.")
